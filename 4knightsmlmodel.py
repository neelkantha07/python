import pandas as pd
import numpy as np
import yfinance as yf
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import tkinter as tk
from tkinter import filedialog, messagebox

# GUI Setup
root = tk.Tk()
root.title("Trading Strategy with ML Integration")
root.geometry("800x600")

# Global Variables
data = None
model = None

# Functions
def download_data():
    global data
    ticker = ticker_entry.get()
    start_date = start_date_entry.get()
    end_date = end_date_entry.get()
    
    if ticker and start_date and end_date:
        try:
            data = yf.download(ticker, start=start_date, end=end_date)
            messagebox.showinfo("Data Downloaded", f"Data downloaded for {ticker} from {start_date} to {end_date}")
        except Exception as e:
            messagebox.showerror("Error", f"Error downloading data: {str(e)}")
    else:
        messagebox.showwarning("Input Missing", "Please provide ticker, start date, and end date.")

def preprocess_data():
    global data
    if data is not None:
        # Exponential Moving Averages (EMA)
        data['EMA5'] = data['Close'].ewm(span=5, adjust=False).mean()
        data['EMA15'] = data['Close'].ewm(span=15, adjust=False).mean()

        # Full Stochastic Oscillator: %K with a 60-period, %D with a 10-period
        data['Stochastic_%K'] = ((data['Close'] - data['Low'].rolling(window=60).min()) / 
                                  (data['High'].rolling(window=60).max() - data['Low'].rolling(window=60).min())) * 100
        data['Stochastic_%D'] = data['Stochastic_%K'].rolling(window=10).mean()  # 10-period %D (SMA of %K)

        # Drop rows with NaN values generated by rolling calculations
        data.dropna(inplace=True)
        messagebox.showinfo("Preprocessing Complete", "Data has been preprocessed successfully.")
    else:
        messagebox.showwarning("No Data", "Please download data first.")


def train_model():
    global model, data
    if data is not None:
        features = ['Close', 'EMA5', 'EMA15', 'Stochastic_%K', 'Volume']
        # Create target variable (1 if next day's Close is greater than today's Close)
        target = (data['Close'].shift(-1) > data['Close']).astype(int)
        # Drop the last row of the target and features to align them
        data = data.iloc[:-1]  # Removing the last row with NaN target
        target = target.iloc[:-1]  # Remove the NaN target value
        
        # Split data into training and test sets
        X_train, X_test, y_train, y_test = train_test_split(data[features], target, test_size=0.2, random_state=42)

        # Initialize and train the Random Forest model
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)

        # Predict and calculate accuracy
        predictions = model.predict(X_test)
        accuracy = accuracy_score(y_test, predictions)

        messagebox.showinfo("Model Trained", f"Model trained with {accuracy*100:.2f}% accuracy")
    else:
        messagebox.showwarning("No Data", "Please download and preprocess data first.")

def predict_trade():
    global model, data
    if model and data is not None:
        # Extract the latest data point for prediction
        latest_data = data.iloc[-1][['Close', 'EMA5', 'EMA15', 'Stochastic_%K', 'Stochastic_%D', 'Volume']].values.reshape(1, -1)
        
        # Convert to DataFrame for the model input
        latest_data_df = pd.DataFrame(latest_data, columns=['Close', 'EMA5', 'EMA15', 'Stochastic_%K', 'Stochastic_%D', 'Volume'])
        
        # Make the prediction using the trained model
        prediction = model.predict(latest_data_df)
        
        # Interpret the prediction: 1 means the price will go up (Profitable), 0 means the price will go down (Non-profitable)
        result = "Profitable Trade Expected" if prediction[0] == 1 else "Non-Profitable Trade Expected"
        
        messagebox.showinfo("Prediction Result", result)
    else:
        messagebox.showwarning("Model Not Trained", "Please train the model first.")


# GUI Elements
ticker_label = tk.Label(root, text="Ticker Symbol (e.g. AAPL):")
ticker_label.pack(pady=5)
ticker_entry = tk.Entry(root)
ticker_entry.pack(pady=5)

start_date_label = tk.Label(root, text="Start Date (YYYY-MM-DD):")
start_date_label.pack(pady=5)
start_date_entry = tk.Entry(root)
start_date_entry.pack(pady=5)

end_date_label = tk.Label(root, text="End Date (YYYY-MM-DD):")
end_date_label.pack(pady=5)
end_date_entry = tk.Entry(root)
end_date_entry.pack(pady=5)

download_button = tk.Button(root, text="Download Data", command=download_data)
download_button.pack(pady=10)

preprocess_button = tk.Button(root, text="Preprocess Data", command=preprocess_data)
preprocess_button.pack(pady=10)

train_button = tk.Button(root, text="Train Model", command=train_model)
train_button.pack(pady=10)

predict_button = tk.Button(root, text="Predict Trade", command=predict_trade)
predict_button.pack(pady=10)

root.mainloop()
